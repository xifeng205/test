
/*********************************************************************
 * Author        : cuiyunpeng
 * Email         : @163.com
 * Create time   : 2020-12-16 15:33
 * Last modified : 2020-12-16 15:33
 * Filename      : amplitude_limiter_filter.cpp
 * Description   :
 *********************************************************************/

#include <cstring>
#include <iostream>

using namespace std;

// 1 中值滤波器
// 2 优缺点:
//(1) 优点: 能够有效的克服偶然因素引起的波动干扰; 对温度, 液位变化缓慢
//    的被测参数有良好的滤波效果.
//(2) 缺点: 对流量速度快速变化的被测参数不宜
//
// 3 扩展
// (1)定义
// 中值是数学统计术语，是指组距的上下限之算术平均数。当变量值的项数N为奇数时
// ，处于中间位置的变量值即为中位数；当N为偶数时，中位数则为处于中间位置的2个
// 变量值的平均数。
// 中值也称中位数，即数据按升序或者降序排列，假如有n个数据，当n为偶数时，中位
// 数为第n/2位数和第(n+2)/2位数的平均数；如果n为奇数，那么中位数为第（n+1）/2
// 位数的值。 [1]
//
// (2)特点
// 1.中值是以它在所有标志值中所处的位置确定的全体单位标志值的代表值，不受分布
// 数列的极大或极小值影响，从而在一定程度上提高了中值对分布数列的代表性。
// 2.有些离散型变量的单项式数列，当次数分布偏态时，中值的代表性会受到影响。
// 3.趋于一串数的中间位置。
//
// 与均值的关系
// 中值和平均值没有必然的关系。中值是将所给的一组数从小到大或从大到小排列，奇
// 数个数的话取中间的数字，偶数个数的话取中间两个数的平均数；而平均值就是把这
// 组数相加，然后除以这组数的个数。中值的优点是不受偏大或偏小数据的影响，很多
// 情况下用它代表全体数据的一般水平更合适。如果数列中存在极端变量值，用中位数
// 做代表值就比平均数更好。
//
// (3)计算
// 对于有限的数集，可以通过把所有观察值高低排序后找出正中间的一个作为中值。如
// 果观察值有偶数个，则中值不唯一，通常取最中间的两个数值的平均数作为中值。
// 对于一组有限个数的数据来说，它们的中值是这样的一种数：这群数据里的一半的数
// 据比它大，而另外一半数据比它小。计算有限个数的数据的中值的方法是：把所有的
// 同类数据按照大小的顺序排列。如果数据的个数是奇数，则中间那个数据就是这群数
// 据的中位数；如果数据的个数是偶数，则中间那2个数据的算术平均值就是这群数据的
// 中值。中值也就是选取中间的数，是一种衡量集中趋势的方法。
// 设连续随机变量X的分布函数为F(X)，那么满足条件P(X≤m)=F(m)=1/2的数称为X或分布
// F的中位数。对于一组有限个数的数据来说，它们的中位数是这样的一种数：这群数据
// 里的一半的数据比它大，而另外一半数据比它小。 计算有限个数的数据的中值的方法
// 是把所有的同类数据按照大小的顺序排列。如果数据的个数是奇数，则中间那个数据就
// 是这群数据的中值；如果数据的个数是偶数，则中间那2个数据的算术平均值就是这群
// 数据的中值。要找中值，首先需要从小到大排序，若这组数据有n个数，n为奇数，则选
// 择第（n+1）/2个为中值，若n为偶数，则中值是（n/2以及n/2+1）的平均数。

template <typename T, typename L>
void middle_valude_filter(T data[], L const len, bool method) {
  // 1 排序
    char data_tmp[len];
    memcpy(data_tmp, data, len);
    for(int i = 0; i< len;  ++i){
      for(int j=len -i-1; j > 0; --j){
        if(data_tmp[i] > data_tmp[i+1]){
          int t = data_tmp[i];
          data_tmp[i+i] = data_tmp[i];
          data_tmp[i] =t;
        }
      }
    }
    memcpy(data, data_tmp, len);

  //  2 计算中值
  if(len%2){

  }else {

  }

  //  3 根据需求进行中值替换
  if(method) {
     
  }else {

  }
}

int main(int argc, char **argv) {
  int data[10] = {0, 1, 9, 33,  5, 6, 7, 8, 9};
  middle_valude_filter(data, 10, 0);
  for (int i = 0; i < 10; i++) {
    std::cout << data[i];
  }
  std::cout << std::endl;
  return 0;
}
